# -*- coding: utf-8 -*-
"""
Created on Fri May 26 20:53:19 2023

@author: 1
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
df=pd.read_csv('D:\\dataset\\social.csv')

#result=df.isnull()
#print(result)
df.dtypes
df.describe()
df.index=list(df.index)
df.columns=list(df.columns)
df.shape
#result=df.head(5)
#print(result)
result=df.columns.values
#print(result)
result=df.describe(include='all')
print(result)
df['Gender']
df.sort_index(axis=1,ascending=False)
df.iloc[5]



# -*- coding: utf-8 -*-
"""
Created on Fri May 26 21:19:03 2023

@author: 2
"""
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
df=pd.read_csv('D:\\dataset\\social.csv')

result=df.isnull()
print(result)
df.dtypes
df.describe()
df.index=list(df.index)
df.columns=list(df.columns)
result=df.describe(include='all')
#print(result)
df['Gender']
df.sort_index(axis=1,ascending=False)


# -*- coding: utf-8 -*-
"""
Created on Fri May 26 21:20:11 2023

@author: 3
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
df=pd.read_csv('D:\\dataset\\social.csv')

result=df.isnull()
print(result)
df.dtypes
df.describe()
df.iloc[5]
df[0:3]
df.loc[:,["Gender","Age"]]


# -*- coding: utf-8 -*-
"""
Created on Fri May 26 21:24:52 2023

@author: 4
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
df=pd.read_csv('D:\\dataset\\social.csv')

df.isnull()
df.dtypes
df.describe()
#FOR DATA FORMATTING
df.dtypes
df['Age']= df['Age'].astype("int")
#For Data Normalization
from sklearn import preprocessing
min_max_scaler = preprocessing.MinMaxScaler()
x=df.iloc[:,:1]
x_scaled = min_max_scaler.fit_transform(x)
df_normalized = pd.DataFrame(x_scaled)
print(df_normalized)



5
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
df=pd.read_csv('D:\\dataset\\social.csv')

df.isnull()
df.dtypes
df.describe()
#categorical to numeric
from sklearn import preprocessing
result=df['Gender'].unique()
label_encoder = preprocessing.LabelEncoder()
df['Age']= label_encoder.fit_transform(df['Age'])
print(result)
#COUNT OF MISSING VALUES
df.Gender.isnull().sum()
#groupby count of missing values of a column.
df.groupby(['Gender'])['Age'].apply(lambda x: x.isnull().sum())



# -*- coding: utf-8 -*-
"""
Created on Fri May 26 22:15:49 2023

@author: 6
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
df=pd.read_csv('D:\\dataset\\StudentPerformance.csv')
result=df.head(5)
#print(result)
result=df.isnull()
#print(result)
#outliers
sns.boxplot(df['Math_Score'])
#scaling
from sklearn.preprocessing import LabelEncoder 
le = LabelEncoder()
result=df['Math_Score'] = le.fit_transform(df['Math_Score']) 
print(result)
newdf=df
newdf.dropna()
from sklearn import preprocessing
min_max_scaler = preprocessing.MinMaxScaler()
x=df.iloc[:,:1]
x_scaled = min_max_scaler.fit_transform(x)
df_scaled = pd.DataFrame(x_scaled)
#print(df_scaled)
#newdf['Math_Score'].plot(kind = 'hist')



7
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
from sklearn import preprocessing
import math
import statistics as st
df = pd.read_csv(r"D:\\dataset\\social.csv")
#df=df['Age'].median()

data=df['EstimatedSalary'].max()
#print(data)

#df.min()

#result=df.groupby(['Age'])['EstimatedSalary'].mean()
#print(result)


enc = preprocessing.OneHotEncoder()
enc_df = pd.DataFrame(enc.fit_transform(df[['EstimatedSalary']]).toarray())
#print(enc_df)

df_encode =df.join(enc_df)
#print(df_encode)



# -*- coding: utf-8 -*-
"""
Created on Fri May 26 23:19:30 2023

@author: 8
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats
from sklearn import preprocessing
import math
import statistics as st
df = pd.read_csv(r"D:\\dataset\\social.csv")
#df=df['Age'].median()

data=df['EstimatedSalary'].max()
#print(data)

#df.min()

#result=df.groupby(['Age'])['EstimatedSalary'].mean()
#print(result)












import pandas as pd999
import numpy as np
import matplotlib.pyplot as plt
x=np.array([95,85,80,60])
y=np.array([85,95,70,70])
model= np.polyfit(x, y, 1)
print(model)
predict = np.poly1d(model)
predict(65)
y_pred= predict(x)
y_pred
from sklearn.metrics import r2_score
r2_score(y, y_pred)
y_line = model[1] + model[0]* x
plt.plot(x, y_line, c = 'r')
plt.scatter(x, y_pred)
plt.scatter(x,y,c='r')
from sklearn.datasets import load_boston
boston = load_boston()
data = pd.DataFrame(boston.data)
data.columns = boston.feature_names
data.head()
data['PRICE'] = boston.target
data.isnull().sum()
x = data.drop(['PRICE'], axis = 1)
y = data['PRICE']
from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x, y, test_size =0.2,random_state = 0)
import sklearn
from sklearn.linear_model import LinearRegression
lm = LinearRegression()
model=lm.fit(xtrain, ytrain)
ytrain_pred = lm.predict(xtrain)
ytest_pred = lm.predict(xtest)
df=pd.DataFrame(ytrain_pred,ytrain)
df=pd.DataFrame(ytest_pred,ytest)
from sklearn.metrics import mean_squared_error, r2_score
mse = mean_squared_error(ytest, ytest_pred)
print(mse)
mse = mean_squared_error(ytrain_pred,ytrain)
print(mse)
mse = mean_squared_error(ytest, ytest_pred)
print(mse)
#plt.scatter(ytrain ,ytrain_pred,c='blue',marker='o',label='Training data')
#plt.scatter(ytest,ytest_pred ,c='lightgreen',marker='s',label='Test data')
#plt.xlabel('True values')
#plt.ylabel('Predicted')
#plt.title("True value vs Predicted value")
#plt.legend(loc= 'upper left')
#plt.hlines(y=0,xmin=0,xmax=50)
#plt.plot()
#plt.show()







import pandas as pd10
import matplotlib.pyplot as plt
df = pd.read_csv("D:\\dataset\\social.csv")
df['Gender']
df.isnull()
df.dtypes
df['Gender'] = df['Gender'].map({'Male': 1, 'Female': 0})
df['Gender']
x = df.drop(['Age'],axis=1)
y= df['Age']
from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x, y,test_size=0.25, random_state=0)
from sklearn.preprocessing import StandardScaler    
st_x= StandardScaler()   
xtrain= st_x.fit_transform(xtrain)    
xtest= st_x.transform(xtest)  
from sklearn.linear_model import LogisticRegression   
classifier= LogisticRegression(random_state=0) 
classifier.fit(xtrain, ytrain)
y_pred= classifier.predict(xtest)   
#print(y_pred)
from sklearn.metrics import confusion_matrix  
cm = confusion_matrix(ytest, y_pred)  
#print(cm)
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
precision =precision_score(ytest, y_pred,average='micro')
recall = recall_score(ytest, y_pred,average='micro')
plt.scatter(ytrain ,ytrain)#,c='blue',marker='o',label='Training data')
plt.scatter(ytest,ytest)#,c='lightgreen',marker='s',label='Test data')
plt.xlabel('True values')
plt.ylabel('Predicted')
plt.title("True value vs Predicted value")
plt.legend(loc= 'upper left')
plt.hlines(y=0,xmin=0,xmax=50)
plt.plot()
plt.show()
TP = 0
FP = 0
TN = 0
FN = 0
y_actual=classifier.predict(xtrain)
for i in range(len(y_pred)): 
  if y_actual[i]==y_pred[i]==1:
           TP += 1
  if y_pred[i]==1 and y_actual[i]!=y_pred[i]:
           FP += 1
  if y_actual[i]==y_pred[i]==0:
           TN += 1
  if y_pred[i]==0 and y_actual[i]!=y_pred[i]:
           FN += 1
#return(TP, FP, TN, FN)
print(FN)








text= "Tokenization is the first step in text analytics. The process of breaking down a text paragraph into smaller chunks such as words or sentences is called Tokenization."

from nltk.tokenize import word_tokenize
tokenized_text= word_tokenize(text)
#print(tokenized_text)
from nltk import re
from nltk.corpus import stopwords
stop_words=set(stopwords.words("english"))
#print(stop_words)
text= "How to remove stop words with NLTK library in Python?"
text= re.sub('[^a-zA-Z]', ' ',text)
tokens = word_tokenize(text.lower())
filtered_text=[]
for w in tokens:
 if w not in stop_words:
  filtered_text.append(w)
#print("Tokenized Sentence:",tokens)
#print("Filterd Sentence:",filtered_text)
from nltk.stem import PorterStemmer
e_words= ["wait", "waiting", "waited", "waits"]
ps =PorterStemmer()
for w in e_words:
 rootWord=ps.stem(w)
#print(rootWord)
import nltk
from nltk.stem import WordNetLemmatizer
wordnet_lemmatizer = WordNetLemmatizer() 
text ="studies studying cries cry" 
tokenization =nltk.word_tokenize(text)
for w in tokenization:
 print("Lemma for {} is {}".format(w, wordnet_lemmatizer.lemmatize(w)))
#{}".format(w, wordnet_lemmatizer.lemmatize(w)))

 from nltk.tokenize import word_tokenize 
data="The pink sweater fit her perfectly"
words=word_tokenize(data)
for word in words: 
    print(nltk.pos_tag([word]))
   









# -*- coding: utf-8 -*-
"""
Created on Wed May 24 09:16:37 2023

@author: 12
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
dataset = pd.read_csv("D:\\dataset\\social.csv")
sns.distplot(x = dataset['Age'], bins = 10)

#sns.distplot(dataset['Age'], bins = 10,kde=False)

# For Plot 1
#sns.jointplot(x = dataset['Gender'], y = dataset['EstimatedSalary'], kind ='scatter')

# For Plot 2
#sns.jointplot(x = dataset['Age'], y = dataset['EstimatedSalary'], kind = 'hex')


#sns.rugplot(dataset['Age'])

#sns.barplot(x='Gender', y='Age', data=dataset)

#sns.barplot(x='Gender', y='Age', data=dataset, estimator=np.std)

#sns.countplot(x='Age', data=dataset)


#sns.boxplot(x='Gender', y='Age', data=dataset)
          
#sns.boxplot(x='Gender', y='Age', data=dataset, hue="Purchased")

#sns.violinplot(x='Gender', y='Age', data=dataset)



#sns.swarmplot(x='Gender', y='Age', data=dataset, hue='Purchased')

dataset.corr()

corr = dataset.corr()

sns.heatmap(corr)

sns.heatmap(corr, annot=True)

sns.heatmap(corr)
sns.histplot(dataset['Age'], kde=False, bins=10)






# -*- coding: utf-8 -*-
"""
Created on Wed May 24 09:27:58 2023

@author: 13
"""

import seaborn as sns
import pandas as pd
dataset = pd.read_csv("D:\\dataset\\social.csv")

dataset.head()

sns.boxplot(x='Gender',y='Age', data = dataset)

sns.boxplot(x='Gender',y='Age', data=dataset, hue='Purchased')






